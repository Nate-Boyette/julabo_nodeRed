[
    {
        "id": "77739f07d1fee012",
        "type": "tab",
        "label": "Julabo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d2ce7379b0b9c720",
        "type": "tab",
        "label": "Julabo OPCUA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0c7cfe180c3dd028",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://10.20.8.215:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "eef81d50a1dfa758",
        "type": "serial-port",
        "name": "RS232",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "4800",
        "databits": "7",
        "parity": "even",
        "stopbits": 1,
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": " \\r",
        "responsetimeout": "1000"
    },
    {
        "id": "34a7d51580ea7526",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "c780e8d77f7b8125",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "1f3fa0e6eacd842e",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "34a7d51580ea7526",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "c780e8d77f7b8125",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5d2c8ad10fce93c9",
        "type": "ui-group",
        "name": "Chiller",
        "page": "1f3fa0e6eacd842e",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "bb039652.dcf5a8",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://H7Q8Q13.vstage.co:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "278a94148664a27b",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "7290d8b0.f713d8",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer",
        "login": false
    },
    {
        "id": "2127492e50451c2d",
        "type": "serial request",
        "z": "77739f07d1fee012",
        "name": "rs232",
        "serial": "eef81d50a1dfa758",
        "x": 1010,
        "y": 260,
        "wires": [
            [
                "0141e63a67abf376",
                "5908ccb692831d25"
            ]
        ]
    },
    {
        "id": "20c639345ca90e29",
        "type": "inject",
        "z": "77739f07d1fee012",
        "name": "Bath Temp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "bathTemp",
        "payload": "IN_PV_00",
        "payloadType": "str",
        "x": 90,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "6dcd2d6171198e9d",
        "type": "inject",
        "z": "77739f07d1fee012",
        "name": "Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3.4",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "status",
        "payload": "status",
        "payloadType": "str",
        "x": 80,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "ebf0de748a8f9da1",
        "type": "inject",
        "z": "77739f07d1fee012",
        "name": "External Temp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5.3",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "externalTemp",
        "payload": "IN_PV_02",
        "payloadType": "str",
        "x": 100,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "a5ee9ea1f4deddc9",
        "type": "inject",
        "z": "77739f07d1fee012",
        "name": "SP_FB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7.4",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "spFb",
        "payload": "IN_SP_00",
        "payloadType": "str",
        "x": 80,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "6eef82f1898d7ea2",
        "type": "comment",
        "z": "77739f07d1fee012",
        "name": "Status",
        "info": "",
        "x": 90,
        "y": 580,
        "wires": []
    },
    {
        "id": "a4898d68992732e7",
        "type": "comment",
        "z": "77739f07d1fee012",
        "name": "Cyclic Control",
        "info": "Thiws timestamp triggers the read nodes for\ntemp SP and the start command boolean",
        "x": 90,
        "y": 220,
        "wires": []
    },
    {
        "id": "0141e63a67abf376",
        "type": "switch",
        "z": "77739f07d1fee012",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "bathTemp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "externalTemp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spFb",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1170,
        "y": 260,
        "wires": [
            [
                "e3094a8fd6430774"
            ],
            [
                "32ce431112857992"
            ],
            [
                "dd4c9ce2f38c2cff"
            ],
            [
                "9c4e6c594c080f04"
            ]
        ]
    },
    {
        "id": "8e5d27ba163bb935",
        "type": "inject",
        "z": "77739f07d1fee012",
        "name": "Selected SP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "selectedSP",
        "payload": "IN_MODE_01",
        "payloadType": "str",
        "x": 90,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "7d104780cebe2620",
        "type": "function",
        "z": "77739f07d1fee012",
        "name": "Temp SP Concatenate",
        "func": "var SPin = msg.payload\nmsg.payload = \"OUT_SP_00 \" + SPin \nmsg.topic = \"spRead\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "8a012bbb443386af"
            ]
        ]
    },
    {
        "id": "e3094a8fd6430774",
        "type": "link out",
        "z": "77739f07d1fee012",
        "name": "Bath Temp",
        "mode": "link",
        "links": [
            "3612154f23d5d54d"
        ],
        "x": 1325,
        "y": 200,
        "wires": []
    },
    {
        "id": "32ce431112857992",
        "type": "link out",
        "z": "77739f07d1fee012",
        "name": "Status",
        "mode": "link",
        "links": [
            "ec4f8eea18d5e764"
        ],
        "x": 1325,
        "y": 240,
        "wires": []
    },
    {
        "id": "dd4c9ce2f38c2cff",
        "type": "link out",
        "z": "77739f07d1fee012",
        "name": "External Temp",
        "mode": "link",
        "links": [
            "e2e75b601ec85308"
        ],
        "x": 1325,
        "y": 280,
        "wires": []
    },
    {
        "id": "9c4e6c594c080f04",
        "type": "link out",
        "z": "77739f07d1fee012",
        "name": "SP Feedback",
        "mode": "link",
        "links": [
            "c7a89e403f0f002f"
        ],
        "x": 1325,
        "y": 320,
        "wires": []
    },
    {
        "id": "5908ccb692831d25",
        "type": "debug",
        "z": "77739f07d1fee012",
        "name": "rs232",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "559e72bc7dec3bdc",
        "type": "OpcUa-Client",
        "z": "77739f07d1fee012",
        "endpoint": "0c7cfe180c3dd028",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "setstatusandtime": false,
        "keepsessionalive": false,
        "name": "",
        "x": 400,
        "y": 240,
        "wires": [
            [
                "38b2e0d05d09a14e"
            ],
            [],
            []
        ]
    },
    {
        "id": "02c83f8dfb88d9e3",
        "type": "OpcUa-Item",
        "z": "77739f07d1fee012",
        "item": "ns=1;s=Julabo.SP",
        "datatype": "Float",
        "value": "",
        "name": "SP read",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "559e72bc7dec3bdc"
            ]
        ]
    },
    {
        "id": "aabe498c99b315e3",
        "type": "OpcUa-Item",
        "z": "77739f07d1fee012",
        "item": "ns=1;s=Julabo.Start;datatype=Boolean",
        "datatype": "Boolean",
        "value": "",
        "name": "Start read",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "9388b0c7f81aa50f"
            ]
        ]
    },
    {
        "id": "9388b0c7f81aa50f",
        "type": "OpcUa-Client",
        "z": "77739f07d1fee012",
        "endpoint": "0c7cfe180c3dd028",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "setstatusandtime": false,
        "keepsessionalive": false,
        "name": "",
        "x": 400,
        "y": 300,
        "wires": [
            [
                "290984402e08715f"
            ],
            [],
            []
        ]
    },
    {
        "id": "64bca74c9c13720a",
        "type": "function",
        "z": "77739f07d1fee012",
        "name": "Start Concatenate",
        "func": "var SS = msg.payload\nvar value = (SS === true || SS === \"true\" || SS === 1 || SS === \"1\") ? 1 : 0\nmsg.payload = \"OUT_MODE_05 \" + value  \nmsg.topic = \"Start\"\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "8a012bbb443386af"
            ]
        ]
    },
    {
        "id": "bb0030cf9823a3a5",
        "type": "inject",
        "z": "77739f07d1fee012",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "6",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "02c83f8dfb88d9e3",
                "aabe498c99b315e3",
                "2871d39e7e32b739"
            ]
        ]
    },
    {
        "id": "8a012bbb443386af",
        "type": "function",
        "z": "77739f07d1fee012",
        "name": "Command List",
        "func": "const commands = [\n    { payload: \"IN_PV_00\", topic: \"bathTemp\" },\n    { payload: \"status\", topic: \"status\" },\n    { payload: \"IN_PV_02\", topic: \"externalTemp\" },\n    { payload: \"IN_SP_00\", topic: \"spFb\" },\n    { payload: \"IN_MODE_01\", topic: \"selectedSP\" }\n];\n\nif (msg.topic === \"spRead\") {\n    commands.push({ payload: msg.payload, topic: msg.topic });\n   }\nif (msg.topic === \"Start\") {\n   commands.push({ payload: msg.payload, topic: msg.topic });\n}\n\nconst delay = 100;\n\ncommands.forEach((cmd, i) => {\n    setTimeout(() => {\n        node.send(cmd);\n    }, i * delay);\n});\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "db440e3c4eb0a9e9",
        "type": "comment",
        "z": "77739f07d1fee012",
        "name": "RS232 output to be sent to OPCUA server",
        "info": "These are feedback variables that need\nto be written to opcua server for \nmonitoring",
        "x": 1520,
        "y": 260,
        "wires": []
    },
    {
        "id": "ea1005b2f7832ecd",
        "type": "comment",
        "z": "77739f07d1fee012",
        "name": "OPCUA command to rs232 string",
        "info": "Takes the values read from the OPCUA server\nand appends them to strings\nto write that command via rs232\n",
        "x": 570,
        "y": 180,
        "wires": []
    },
    {
        "id": "d1402410f1278b86",
        "type": "comment",
        "z": "77739f07d1fee012",
        "name": "write to julabo",
        "info": "this sends both the commands to read\nfeedback variables and to write\nthe command strings that originated from \nOPCUA server",
        "x": 810,
        "y": 220,
        "wires": []
    },
    {
        "id": "38b2e0d05d09a14e",
        "type": "function",
        "z": "77739f07d1fee012",
        "name": "Temp SP Concatenate",
        "func": "var SPin = msg.payload\nmsg.payload = \"OUT_SP_00 \" + SPin\nmsg.topic = \"spRead\"\nflow.set('cmd6_payload', msg.payload)\nflow.set('cmd6_topic', msg.topic)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 400,
        "wires": [
            [
                "368c6e66ec910489"
            ]
        ]
    },
    {
        "id": "290984402e08715f",
        "type": "function",
        "z": "77739f07d1fee012",
        "name": "Start Concatenate",
        "func": "var SS = msg.payload\nvar value = (SS === true || SS === \"true\" || SS === 1 || SS === \"1\") ? 1 : 0\nmsg.payload = \"OUT_MODE_05 \" + value\nmsg.topic = \"Start\"\nflow.set('cmd7_payload', msg.payload)\nflow.set('cmd7_topic', msg.topic)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 440,
        "wires": [
            [
                "6ca9781e36c5e0e7"
            ]
        ]
    },
    {
        "id": "368c6e66ec910489",
        "type": "debug",
        "z": "77739f07d1fee012",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 400,
        "wires": []
    },
    {
        "id": "6ca9781e36c5e0e7",
        "type": "debug",
        "z": "77739f07d1fee012",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 440,
        "wires": []
    },
    {
        "id": "2871d39e7e32b739",
        "type": "function",
        "z": "77739f07d1fee012",
        "name": "build command list",
        "func": "// Store the command list commands in context\nflow.set('cmd1_payload', 'IN_PV_00')\nflow.set('cmd1_topic', 'bathTemp')\n\nflow.set('cmd2_payload', 'status')\nflow.set('cmd2_topic', 'status')\n\nflow.set('cmd3_payload', 'IN_PV_02')\nflow.set('cmd3_topic', 'externalTemp')\n\nflow.set('cmd4_payload', 'IN_SP_00')\nflow.set('cmd4_topic', 'spFb')\n\nflow.set('cmd5_payload', 'IN_MODE_01')\nflow.set('cmd5_topic', 'selectedSP')\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 480,
        "wires": [
            [
                "6ee58fc340dd912b",
                "67f7c48150761110"
            ]
        ]
    },
    {
        "id": "6ee58fc340dd912b",
        "type": "debug",
        "z": "77739f07d1fee012",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 480,
        "wires": []
    },
    {
        "id": "67f7c48150761110",
        "type": "function",
        "z": "77739f07d1fee012",
        "name": "send context ",
        "func": "// Read all commands from context\nconst commands = [];\n\n// Add static commands\nfor (let i = 1; i <= 5; i++) {\n    const payload = flow.get(`cmd${i}_payload`);\n    const topic = flow.get(`cmd${i}_topic`);\n    if (payload && topic) {\n        commands.push({ payload: payload, topic: topic });\n    }\n}\n\n// Add dynamic commands (SP and Start)\nconst cmd6_payload = flow.get('cmd6_payload');\nconst cmd6_topic = flow.get('cmd6_topic');\nif (cmd6_payload && cmd6_topic) {\n    commands.push({ payload: cmd6_payload, topic: cmd6_topic });\n}\n\nconst cmd7_payload = flow.get('cmd7_payload');\nconst cmd7_topic = flow.get('cmd7_topic');\nif (cmd7_payload && cmd7_topic) {\n    commands.push({ payload: cmd7_payload, topic: cmd7_topic });\n}\n\n// Send commands with delay\nconst delay = 1200; // milliseconds - make this configurable as needed\n\ncommands.forEach((cmd, i) => {\n    setTimeout(() => {\n        node.send(cmd);\n    }, i * delay);\n});\n\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "2127492e50451c2d",
                "5486c8ab595656bc"
            ]
        ]
    },
    {
        "id": "5486c8ab595656bc",
        "type": "debug",
        "z": "77739f07d1fee012",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 540,
        "wires": []
    },
    {
        "id": "3612154f23d5d54d",
        "type": "link in",
        "z": "d2ce7379b0b9c720",
        "name": "link in 2",
        "links": [
            "e3094a8fd6430774"
        ],
        "x": 25,
        "y": 720,
        "wires": [
            [
                "ff3f207a6bb8a1a7"
            ]
        ]
    },
    {
        "id": "ec4f8eea18d5e764",
        "type": "link in",
        "z": "d2ce7379b0b9c720",
        "name": "link in 3",
        "links": [
            "32ce431112857992"
        ],
        "x": 25,
        "y": 760,
        "wires": [
            [
                "3a8adfa94134c3f8"
            ]
        ]
    },
    {
        "id": "e2e75b601ec85308",
        "type": "link in",
        "z": "d2ce7379b0b9c720",
        "name": "link in 4",
        "links": [
            "dd4c9ce2f38c2cff"
        ],
        "x": 25,
        "y": 800,
        "wires": [
            [
                "6c484d50efc98068"
            ]
        ]
    },
    {
        "id": "c7a89e403f0f002f",
        "type": "link in",
        "z": "d2ce7379b0b9c720",
        "name": "link in 5",
        "links": [
            "9c4e6c594c080f04"
        ],
        "x": 25,
        "y": 840,
        "wires": [
            [
                "0f9076d4a244db8d"
            ]
        ]
    },
    {
        "id": "5f03a79fee9f0ab0",
        "type": "debug",
        "z": "d2ce7379b0b9c720",
        "name": "Bath Temp Link",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 720,
        "wires": []
    },
    {
        "id": "23129e872276b04d",
        "type": "debug",
        "z": "d2ce7379b0b9c720",
        "name": "Status Link",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 760,
        "wires": []
    },
    {
        "id": "9afad92f01486308",
        "type": "debug",
        "z": "d2ce7379b0b9c720",
        "name": "External Temp Link",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 800,
        "wires": []
    },
    {
        "id": "b0304b8e9a4d9b07",
        "type": "debug",
        "z": "d2ce7379b0b9c720",
        "name": "SP Feedback Link",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 840,
        "wires": []
    },
    {
        "id": "efa7f9952d0aac5f",
        "type": "OpcUa-Server",
        "z": "d2ce7379b0b9c720",
        "port": "4840",
        "name": "julaboServer",
        "endpoint": "",
        "users": "users.json",
        "nodesetDir": "",
        "autoAcceptUnknownCertificate": true,
        "registerToDiscovery": false,
        "constructDefaultAddressSpace": true,
        "allowAnonymous": true,
        "endpointNone": true,
        "endpointSign": true,
        "endpointSignEncrypt": true,
        "endpointBasic128Rsa15": true,
        "endpointBasic256": true,
        "endpointBasic256Sha256": true,
        "maxNodesPerBrowse": 0,
        "maxNodesPerHistoryReadData": 0,
        "maxNodesPerHistoryReadEvents": 0,
        "maxNodesPerHistoryUpdateData": 0,
        "maxNodesPerRead": 0,
        "maxNodesPerWrite": 0,
        "maxNodesPerMethodCall": 0,
        "maxNodesPerRegisterNodes": 0,
        "maxNodesPerNodeManagement": 0,
        "maxMonitoredItemsPerCall": 0,
        "maxNodesPerHistoryUpdateEvents": 0,
        "maxNodesPerTranslateBrowsePathsToNodeIds": 0,
        "maxConnectionsPerEndpoint": 20,
        "maxMessageSize": 4096,
        "maxBufferSize": 4096,
        "maxSessions": 20,
        "x": 1190,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7c8816c1f10680f0",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Create Julabo Folder",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "ns=3;s=Julabo",
        "payload": "{\"opcuaCommand\":\"addFolder\"}",
        "payloadType": "json",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "d859c4df25dc7cd0",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "add bathTemp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "ns=1;s=Julabo.bathTemp;datatype=Float",
        "payload": "{\"opcuaCommand\":\"addVariable\"}",
        "payloadType": "json",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "51587ef96decde51",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Add status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4.1",
        "topic": "ns=1;s=Julabo.status;datatype=Int32",
        "payload": "{\"opcuaCommand\":\"addVariable\"}",
        "payloadType": "json",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "720ae501dd316772",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Add externalTemp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4.2",
        "topic": "ns=1;s=Julabo.externalTemp;datatype=Float",
        "payload": "{\"opcuaCommand\":\"addVariable\"}",
        "payloadType": "json",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "2110d28030261404",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Add spFeedback",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4.3",
        "topic": "ns=1;s=Julabo.spFeedback;datatype=Float",
        "payload": "{\"opcuaCommand\":\"addVariable\"}",
        "payloadType": "json",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "ff3f207a6bb8a1a7",
        "type": "convert",
        "z": "d2ce7379b0b9c720",
        "name": "",
        "convertTo": "number",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "3db9b2c70a88bb1c"
            ]
        ]
    },
    {
        "id": "6c484d50efc98068",
        "type": "convert",
        "z": "d2ce7379b0b9c720",
        "name": "",
        "convertTo": "number",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "3a85b912ab552756"
            ]
        ]
    },
    {
        "id": "0f9076d4a244db8d",
        "type": "convert",
        "z": "d2ce7379b0b9c720",
        "name": "",
        "convertTo": "number",
        "x": 170,
        "y": 840,
        "wires": [
            [
                "80b16ec18da246cf"
            ]
        ]
    },
    {
        "id": "3a8adfa94134c3f8",
        "type": "function",
        "z": "d2ce7379b0b9c720",
        "name": "Strip out status code",
        "func": "//This function strips the first 2 characters\n//from the status string and converts to an Int32\n\nvar str = msg.payload;\nvar sub = str.slice(0,2);\nvar int = parseInt(sub);\nmsg.payload = int;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 760,
        "wires": [
            [
                "6c41a89f54b1e590",
                "afe1dca70af00924"
            ]
        ]
    },
    {
        "id": "12891de8ff1d0c0d",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Add SP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4.5",
        "topic": "ns=1;s=Julabo.SP;datatype=Float",
        "payload": "{\"opcuaCommand\":\"addVariable\"}",
        "payloadType": "json",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "3ce6a1ec9ea88dea",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Add Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4.6",
        "topic": "ns=1;s=Julabo.Start;datatype=Boolean",
        "payload": "{\"opcuaCommand\":\"addVariable\"}",
        "payloadType": "json",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "78de3613c3096d0e",
        "type": "comment",
        "z": "d2ce7379b0b9c720",
        "name": "Feedback",
        "info": "These are feedback coming from the \njulabo unit from the rs232 commands\nwe're converting these to opcua messages\nand posting to the server",
        "x": 140,
        "y": 680,
        "wires": []
    },
    {
        "id": "110ff009807a0ac0",
        "type": "comment",
        "z": "d2ce7379b0b9c720",
        "name": "OPCUA Control",
        "info": "",
        "x": 1560,
        "y": 20,
        "wires": []
    },
    {
        "id": "514b77f3dca50941",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Inject SP 25",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=Julabo.SP;datatype=Float",
        "payload": "25",
        "payloadType": "num",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "396d0b3d93fb5c8e"
            ]
        ]
    },
    {
        "id": "997d6cc763e8d9cb",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Inject start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=Julabo.Start;datatype=Boolean",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "396d0b3d93fb5c8e"
            ]
        ]
    },
    {
        "id": "396d0b3d93fb5c8e",
        "type": "OpcUa-Client",
        "z": "d2ce7379b0b9c720",
        "endpoint": "278a94148664a27b",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "setstatusandtime": false,
        "keepsessionalive": false,
        "name": "",
        "x": 460,
        "y": 480,
        "wires": [
            [
                "efa7f9952d0aac5f"
            ],
            [],
            []
        ]
    },
    {
        "id": "3db9b2c70a88bb1c",
        "type": "function",
        "z": "d2ce7379b0b9c720",
        "name": "bathTemp update",
        "func": "var bathTemp = msg.payload\n\nmsg.payload = {\n    \"messageType\": \"Variable\",\n    \"variableName\": \"Julabo.bathTemp\",\n    \"datatype\": \"Float\",\n    \"namespace\": \"1\",\n    \"variableValue\": msg.payload.toString(),   \n    \"sourceTimestamp\": 1688997600000,\n    \"quality\": \"Good\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 720,
        "wires": [
            [
                "efa7f9952d0aac5f",
                "5f03a79fee9f0ab0"
            ]
        ]
    },
    {
        "id": "957057e20f53d587",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "add TestVariable2 (Float)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=TestVariable2;datatype=Float",
        "payload": "{\"opcuaCommand\": \"addVariable\"}",
        "payloadType": "json",
        "x": 190,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "d5bc694f4fff3776",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Set TestVariable2 34.5 + ts + quality (String)",
        "props": [
            {
                "p": "payload.messageType",
                "v": "Variable",
                "vt": "str"
            },
            {
                "p": "payload.variableName",
                "v": "TestVariable2",
                "vt": "str"
            },
            {
                "p": "payload.datatype",
                "v": "Float",
                "vt": "str"
            },
            {
                "p": "payload.namespace",
                "v": "1",
                "vt": "str"
            },
            {
                "p": "payload.variableValue",
                "v": "54.2",
                "vt": "str"
            },
            {
                "p": "payload.sourceTimestamp",
                "v": "2022-05-25T23:47:00Z",
                "vt": "str"
            },
            {
                "p": "payload.quality",
                "v": "UncertainInitialValue",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "6c41a89f54b1e590",
        "type": "function",
        "z": "d2ce7379b0b9c720",
        "name": "Status update",
        "func": "var bathTemp = msg.payload\n\nmsg.payload = {\n    \"messageType\": \"Variable\",\n    \"variableName\": \"Julabo.status\",\n    \"datatype\": \"Int32\",\n    \"namespace\": \"1\",\n    \"variableValue\": msg.payload.toString(),   \n    \"sourceTimestamp\": 1688997600000,\n    \"quality\": \"Good\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 760,
        "wires": [
            [
                "23129e872276b04d",
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "3a85b912ab552756",
        "type": "function",
        "z": "d2ce7379b0b9c720",
        "name": "externalTemp update",
        "func": "var bathTemp = msg.payload\n\nmsg.payload = {\n    \"messageType\": \"Variable\",\n    \"variableName\": \"Julabo.externalTemp\",\n    \"datatype\": \"Float\",\n    \"namespace\": \"1\",\n    \"variableValue\": msg.payload.toString(),   \n    \"sourceTimestamp\": 1688997600000,\n    \"quality\": \"Good\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 800,
        "wires": [
            [
                "9afad92f01486308",
                "efa7f9952d0aac5f"
            ]
        ]
    },
    {
        "id": "80b16ec18da246cf",
        "type": "function",
        "z": "d2ce7379b0b9c720",
        "name": "SP feedback update",
        "func": "var bathTemp = msg.payload\n\nmsg.payload = {\n    \"messageType\": \"Variable\",\n    \"variableName\": \"Julabo.spFeedback\",\n    \"datatype\": \"Float\",\n    \"namespace\": \"1\",\n    \"variableValue\": msg.payload.toString(),   \n    \"sourceTimestamp\": 1688997600000,\n    \"quality\": \"Good\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 840,
        "wires": [
            [
                "efa7f9952d0aac5f",
                "b0304b8e9a4d9b07"
            ]
        ]
    },
    {
        "id": "5a1f7ae65d6bf43c",
        "type": "comment",
        "z": "d2ce7379b0b9c720",
        "name": "Variable Creation on Startup",
        "info": "These inject nodes fire on start up \nto create the variables that we will\nbe reading/manipulating for the Julabo\nheater/chiller unit",
        "x": 240,
        "y": 60,
        "wires": []
    },
    {
        "id": "442b47daf8eeaf9f",
        "type": "comment",
        "z": "d2ce7379b0b9c720",
        "name": "Test injects for SP and start/stop",
        "info": "this step does NOT write to the \nunit, this just gets the value\nwritten into the server\nto be sent to the unit on\nthe other page",
        "x": 230,
        "y": 400,
        "wires": []
    },
    {
        "id": "9de881dc0eb46758",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Inject SP 47",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=Julabo.SP;datatype=Float",
        "payload": "47",
        "payloadType": "num",
        "x": 170,
        "y": 440,
        "wires": [
            [
                "396d0b3d93fb5c8e"
            ]
        ]
    },
    {
        "id": "29354199e4a0ca32",
        "type": "inject",
        "z": "d2ce7379b0b9c720",
        "name": "Inject stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=Julabo.Start;datatype=Boolean",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "396d0b3d93fb5c8e"
            ]
        ]
    },
    {
        "id": "afe1dca70af00924",
        "type": "debug",
        "z": "d2ce7379b0b9c720",
        "name": "status code only",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 660,
        "wires": []
    }
]